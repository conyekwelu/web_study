Atom makes creating a bare bones html doc easy - just type html and hit enter
(automatically creates html, head, title and body tags)

<!-- Can also use shortcut ctrl /  -->

<> content </> = element
(a tag and the content it encircles is called an element e.g. h1 element)
exceptions include <img>

to add style, add a style element to the head section under title

elements have attributes used to customize them e.g.
- style has attribute type="text/css"
- a has href attribute which allows you specify link destination
- img has src attribute which specifies picture file name (and location)

attributes come in name="value" pairs

Information about the Web page goes into the <head> element.
What you put into the <body> element is what you see in the browser.

File Organization (optimize simple and flexible/scalable)
- Root Folder -> contains homepage.html
- Images Folder -> contains images
- Category Folders -> contains html for other categories
[use ../ to go up use folder/file.html to go down]

Page Design
- sketch
- outline and structure [blocks then inline]
- write HTML

use q or blockquote to emphasize quotations (can nest <p> within blockquote)
q is an inline element while blockquote is a block element [line break pre & post]
use <code> to display code in browser
<address> -> tells browser the content is an address
<strong> -> bold emphasis, extra strength
<pre> -> show text exactly as typed
<em> -> emphasize text with italics
<hr> -> horizontal line between sections


empty elements:
- <br> = line breaks
- <img> = image

put each list item in an <li> tag, enclose all in <ol> or <ul>
visit http://www.w3schools.com/tags/ref_entities.asp for entities


HTML - structure
CSS - presentation

Answers to Questions

Uniform Resource Locator -> specifies protocol and global address (absolute path)
http -> simple request and response protocol
default port is 80 unless o.w. specified
homepage -> index.html or default.htm (MS webserver)


Better linking
- concise labels
- meaningful labels
- not next to each other

Creating anchor to section
- create anchor destination (e.g. anchor tab with id="chai")
- create anchor link to destination (href="index.html#chai")
- open anchor destination in new page (target="_blank")
# note users prefer to control when a new page opens

IMAGES
JPG vs GIF [lossy-16M vs lossless-256]
GIFs are better for logos cos transparency
J G J G J
<img> -> inline element, but nested in a block element
width & height attributes in pixels [browser is 800px (72px per inch)]
Logos are generally between 100 - 200px

STANDARDS
-Document type (html4)
<!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “http://www.w3.org/TR/html4/loose.dtd”>
<!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01//EN” “http://www.w3.org/TR/html4/strict.dtd”>
- Document type (XHTML)
<!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd”>
<html xmlns=”http://www.w3.org/1999/xhtml” lang=”en” xml:lang=”en”>

- validator -> http://validator.w3.org
- meta tags (specify encoding)
<meta http-equiv=”Content-Type” content=”text/html; charset=ISO-8859-1”>

CSS
- selector/section {property: style/value;}
- group together common styles between elements (separate them with commas)
- <link> -> connect external stylesheet to html file
- if more than one stylesheet, order of linking matters [subsequent can override previous]
- media attribute tailors to user source
- use attribute class to add an attribute to element [and create a group]
- use attribute id if just one section [no intent to reuse - e.g. header, footer]
- .class is the selector for all elements in a class
- most specific rule is used (used for overrides)
- order of styling ->selected? > inherited? > default (conflict? select last)
- can have more than one stylesheet
- CSS validator -> http://jigsaw.w3.org/css-validator/
- O'reilly CSS Pocket Reference

common css:
color -> font color
font-weight -> bold
left -> left align
line-height -> line spacing
background-color -> background color of element
text-align -> to align text
font-style -> italicize
border -> border around element

Choosing Fonts
- specific font, then font family
Choosing Font Sizes
- Absolute vs relative to parent vs browser defined (pixels vs % and em vs small, large etc)
- Choose a keyword [small or medium] for body selector
- Specify other elements relative to body font size
- use <del> to highlight strikethroughs in text
Colors
- based on RGB - 100:100:100 = white, 0:0:0 = black
- CSS defines names of only 17 colors
- can specify as rgb(80%, 40%, 0%) or rgb(204, 102, 0)
- can specify with hex codes by prefix with # and convert to hexadecimal

Box Model
- Content Area (width) > Padding (width on 4 sides) > Border (width, color, style) > Margin (width on 4 sides)

Stopped at Page 456
