Stopped at Pg 121

adding JS to your page:
in head/body section:
<script src-"mycode.js"> </script>
or
<script> my code </script>

document.write(string_var)

DOM - Document Object Model [Tree hierarchy]

Declaring a variable:
    var var_name = object/expression;

alert("Life without Ice-cream"); == puts "Life without Ice-cream"

forloops in js
for (initialize local var e.g. i=10 ,condition e.g. i > 0 , update counter e.g. i--) { do this };

Creating an array in JS
  var my_array = new Array();
  my_array.length;

document.getElementById("planet") ->  a js method called on a html document
                                      to retrieve element with id "planet"

updating elements:
#retrieve element to update
  var planet = document.getElementById("planet");
#update text in retrieved element using innerHTML
  planet.innerHTML = "Red Alert: hit by phaser fire!";
#ensure update happens after DOM is rendered
  function init(){ insert retrieval and update code here }; #creates a function init()
  window.onload = init;

Can use JS to CRUD on DOM
add item to ends of array: array.push("new item")

Chapter 4 Notes

Note: you create a function with parameters and call it with arguments
shadowing: when you name a local variable same as an existing global
Note: minimize use of global variables to prevent clashes with other libraries
Note: two functions named the same in different files? browser uses last seen
Note: you can assign a function to a variable

Observation: objects in JS look like hashes in Ruby, dicts in python
Pictorially:
Object -> Properties -> Methods

window[properties[location, status, onload, document],
      methods[alert, prompt, open, close, open, setTimeout, setInterval]]

document[properties[domain, title, URL]
        methods[getElementById, getElementByTagName, getElementByClassName, createElement]]

p[properties[innerHTML. childElementCount, firstChild]
  methods[appendChild, insertBefore, setAttribute, getAttribute]]

  Chapter 5 notes (Geolocation API)



  Chapter 6 notes (Retrieving data from Webservers)
  //Allows you to build a website without having to bake the data into the page
  Step 1: provide the url of the resource, store in a variable
  Step 2: create a request object // var request = new XMLHttpRequest()
  Step 3: tell request object the url we want to retrieve and method // request.open("GET", url)
  Step 4: provide handler that is called when data is retrieved
  e.g. request.onload = function(){ if(request.status) == 200 alert("Data Received");}
  Step 5: send request to server // request.send(null);
  //data retrieved is contained in the responseText property of the request object
  e.g. request.onload = function(){ if(request.status) == 200 alert(request.responseText);}

  use JSON.stringify(json_object) to convert a JSON object to a string
  use JSON.parse(json_string) to convert a string to a JSON object

  Method 2 - JSON with padding (pg277)
  insert script element with url + callback function name in body element
  e.g. <script src="http://gumball.wickedlysmart.com/?callback=updateSales"></script>

  setInterval(handler, time_interval in milliseconds)
